{"version":3,"sources":["utils/rateConverter.js","web3/tokenRequester.js","components/Header.js","components/DataContainer.js","components/ProtocolData.js","components/UserData.js","components/GeneralData.js","components/WithdrawDepositTab.js","components/WithdrawDepositTabs.js","components/Deposit.js","components/Withdraw.js","components/LiquidityPool.js","components/PoolContainer.js","components/AppContainer.js","web3/protocolRequester.js","getWeb3.js","models/liquidityPool.js","manager/poolManager.js","App.js","serviceWorker.js","index.js"],"names":["BigNumber","require","RateConverter","_price","toFixed","TokenRequester","_token","_account","getBalance","a","token","methods","balanceOf","account","call","convertToEth","approve","_contractAddress","_valueToStake","console","log","process","versions","convertToWei","send","from","getTokenSymbol","symbol","this","Header","className","props","hwtPrice","isOwner","React","Component","DataContainer","containerClass","indicatorTitle","indicatorValue","indicatorUnit","ProtocolData","allPoolsTvl","GeneralData","allPoolsUserStakedUsd","allPoolsUserReward","allPoolsUserRewardUsd","Tab","onClick","label","activeTab","Tabs","onClickTabItem","tab","setState","state","children","map","child","key","DepositWithdraw","sliderValue","depositAmount","isButtonLocked","componentDidMount","walletBalance","buttonClass","recomputeTokenToDeposit","computeTokenAmount","event","computedAmount","target","value","_sliderValue","computeAmount","Number","parseFloat","depositTokens","prevProps","prevState","type","min","max","step","onChange","bind","disabled","withdrawAmount","userStaked","recomputeTokenToWithdraw","computeTokenToWithdraw","withdrawTokens","LiquidityPool","liquidityPool","dailyReward","tokenPrice","poolTvl","poolTvlUsd","userStakedUsd","userReward","userRewardUsd","depositButtonClass","withdrawButtonClass","rewardButtonClass","isRewardButtonLocked","cssLogoClass","initializePoolData","listenStakedAmountUpdatedEvent","listenRewardOfferedUpdatedEvent","refreshRewardInterval","setInterval","updateRewardAmount","reward","updateAllPoolsData","componentWillUnmount","clearInterval","updateGlobalPoolData","refreshGlobalPoolData","initializeUserPoolData","updateUserStakedAmount","_amount","updateUserReward","recomputeUserStakedUsdAmount","getEventOptions","eventOptions","events","getEvents","StakedAmountUpdated","on","returnValues","address","RewardOffered","claimReward","PoolContainer","Object","entries","poolManager","pools","AppContainer","recomputeAllGeneralData","ProtocolRequester","_contract","_getBlockNumber","getHwtTokenUsdValue","contract","hwtTokenUsdValue","getFlpTokenUsdValue","flpTokenUsdValue","getTotalValueLocked","_address","stake","unstake","getPoolStakedAmount","getStakedAmount","getRewardAmount","claimPoolReward","getPoolRewardPerSecond","getRewardPerSecond","getTokenPrice","convertFromPriceFeed","getProtocolEvents","getBaseEventOptions","getBlockNumber","options","filter","fromBlock","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","location","reload","provider","providers","HttpProvider","_protocolRequester","_tokenInstance","_isFakeToken","_basePrice","_cssLogoClass","initialize","tokenRequester","protocolRequester","r","Math","round","isFakeToken","basePrice","_depositAmount","PoolManager","addNewPool","_id","pool","tvl","userUsdAmount","allPoolsReward","allPoolsRewardUsd","App","storageValue","protocolInstance","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","DefiProtocol","networks","Contract","abi","hwtDeployedNetwork","HWT","hwtInstance","gumDeployedNetwork","GUM","gumInstance","linkInstance","ERC20","owner","hwtTokenPrice","flpTokenPrice","alert","error","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"02zqBAAMA,EAAYC,EAAQ,KAELC,E,0GAEGC,GAChB,OAAOA,EAAS,O,mCAGAA,GAChB,OAAOH,EAAmB,KAATG,GAAeC,Y,2CAGRD,GACxB,OAAOA,EAAS,Q,yvkUCXHE,EAEjB,WAAYC,EAAQC,GAAW,IAAD,gCAM9BC,WAN8B,sBAMjB,sBAAAC,EAAA,kEACFP,IADE,SAC+B,EAAKQ,MAAMC,QAAQC,UAAU,EAAKC,SAASC,OAD1E,iDACYC,aADZ,4DANiB,KAW9BC,QAX8B,uCAWpB,WAAMC,EAAkBC,GAAxB,SAAAT,EAAA,6DACNU,QAAQC,IAAIC,EAAQC,UADd,SAEO,EAAKZ,MAAMC,QAAQK,QAAQC,EAAkBf,IAAcqB,aAAaL,IAAgBM,KAAK,CAACC,KAAM,EAAKZ,UAFhH,mFAXoB,6DAgB9Ba,eAhB8B,sBAgBb,sBAAAjB,EAAA,sEACA,EAAKC,MAAMC,QAAQgB,SAASb,OAD5B,mFAfbc,KAAKlB,MAAQJ,EACbsB,KAAKf,QAAUN,K,qkBCJFsB,E,iLAGb,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,QAAf,OACQ,0BAAMA,UAAU,gBAAhB,KADR,gBAC4D,0BAAMA,UAAU,WAAhB,KAD5D,KAGA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,iBACX,uCACA,8BAAOF,KAAKG,MAAMC,SAAlB,SAEJ,yBAAKF,UAAU,eACX,6BAAMF,KAAKG,MAAMlB,SACjB,yBAAKiB,UAAS,sBAAiBF,KAAKG,MAAME,QAAU,GAAK,kBAAzD,gB,GAfYC,IAAMC,WCArBC,E,iLAGb,OACI,yBAAKN,UAAWF,KAAKG,MAAMM,gBACvB,0BAAMP,UAAU,aAAaF,KAAKG,MAAMO,gBAAsB,8BAAOV,KAAKG,MAAMQ,eAAlB,IAAmCX,KAAKG,MAAMS,oB,GALjFN,IAAMC,WCC5BM,E,iLAGb,OACI,yBAAKX,UAAU,gBACX,wCACA,kBAAC,EAAD,CAAeO,eAAe,gBAAgBC,eAAe,MAAMC,eAAgBX,KAAKG,MAAMW,YAAYtC,QAAQ,GAAIoC,cAAc,W,GAN1GN,IAAMC,W,QCC3BQ,E,iLAGb,OACI,yBAAKb,UAAU,YACX,oCACA,kBAAC,EAAD,CAAeO,eAAe,gBAAgBC,eAAe,sBAAsBC,eAAgBX,KAAKG,MAAMa,sBAAsBxC,QAAQ,GAAIoC,cAAc,MAC9J,kBAAC,EAAD,CAAeH,eAAe,gBAAgBC,eAAe,mBAAmBC,eAAgBX,KAAKG,MAAMc,mBAAoBL,cAAc,QAC7I,kBAAC,EAAD,CAAeH,eAAe,gBAAgBC,eAAe,sBAAsBC,eAAgBX,KAAKG,MAAMe,sBAAsB1C,QAAQ,GAAIoC,cAAc,W,GARrIN,IAAMC,WCA1BQ,E,iLAGb,OACI,yBAAKb,UAAU,wBACX,yBAAKA,UAAU,QAAf,iBACA,yBAAKA,UAAU,eACX,kBAAC,EAAD,CAAcY,YAAad,KAAKG,MAAMW,cACtC,kBAAC,EAAD,CAAWE,sBAAuBhB,KAAKG,MAAMa,sBAAuBC,mBAAoBjB,KAAKG,MAAMc,mBAAoBC,sBAAuBlB,KAAKG,MAAMe,8B,GARpIZ,IAAMC,W,iBCD1BY,E,2MAInBC,QAAU,WAAO,IAAD,EACa,EAAKjB,MAAxBkB,EADM,EACNA,OACRD,EAFc,EACCA,SACPC,I,wEAKR,IAAInB,EAAY,gBAMhB,OAJIF,KAAKG,MAAMmB,YAActB,KAAKG,MAAMkB,QACtCnB,GAAa,oBAIb,wBAAIA,UAAWA,EAAWkB,QAASpB,KAAKoB,SACrCpB,KAAKG,MAAMkB,W,GAnBaf,IAAMC,WCClBgB,E,YAIjB,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KAKVqB,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEJ,UAAWG,KAJ3B,EAAKE,MAAQ,CAAEL,UAAW,EAAKnB,MAAMyB,SAAS,GAAGzB,MAAMkB,OAHxC,E,sEAUT,IACEG,EAA6DxB,KAA7DwB,eAAyBI,EAAoC5B,KAA7CG,MAASyB,SAAqBN,EAAetB,KAAxB2B,MAASL,UAEtD,OACE,yBAAKpB,UAAU,uBACb,wBAAIA,UAAU,YACX0B,EAASC,KAAI,SAACC,GAAW,IAChBT,EAAUS,EAAM3B,MAAhBkB,MAER,OACE,kBAAC,EAAD,CAAoBC,UAAWA,EAAWS,IAAKV,EAAOA,MAAOA,EAAOD,QAASI,QAInF,yBAAKtB,UAAU,eACZ0B,EAASC,KAAI,SAACC,GACb,GAAIA,EAAM3B,MAAMkB,QAAUC,EAC1B,OAAOQ,EAAM3B,MAAMyB,kB,GA/BDtB,IAAMC,WCDnByB,E,2MAEjBL,MAAQ,CAAEM,YAAa,GAAIC,cAAe,EAAGC,gBAAgB,G,EAE7DC,kB,sBAAoB,sBAAAvD,EAAA,sDAGhB,EAAK6C,SAAS,CAACW,cAAe,EAAKlC,MAAMkC,cAAeC,YAAa,KACrE,EAAKC,wBAAwB,EAAKZ,MAAMM,aAGR,IAA7B,EAAK9B,MAAMkC,eACV,EAAKX,SAAS,CAACS,gBAAgB,IARnB,2C,EA8BpBK,mBAAqB,SAACC,GAClB,IAAIC,EAAiB,EAAKH,wBAAwBE,EAAME,OAAOC,OAGzC,IAAnBF,GAAyB,EAAKf,MAAMQ,eAG/BO,EAAiB,GAAK,EAAKf,MAAMQ,gBACrC,EAAKT,SAAS,CAACS,gBAAgB,IAH/B,EAAKT,SAAS,CAACS,gBAAgB,K,EAUvCI,wBAAyB,SAACM,GACtB,IAAIC,EAAgBC,OAAOC,WAAW,EAAK7C,MAAMkC,eAAiBQ,EAAe,MAEjF,OADA,EAAKnB,SAAS,CAACQ,cAAeY,EAAeb,YAAaY,IACnDC,G,EAMXG,c,sBAAgB,sBAAApE,EAAA,sEACN,EAAKsB,MAAM8C,cAAc,EAAKtB,MAAMO,eAD9B,2C,kFA1CGgB,EAAWC,GAEtBD,EAAUb,gBAAkBrC,KAAKG,MAAMkC,gBACvCrC,KAAKuC,wBAAwBvC,KAAK2B,MAAMM,aAGZ,IAA7BjC,KAAKG,MAAMkC,eAAwBrC,KAAK2B,MAAMQ,eAGzCnC,KAAKG,MAAMkC,cAAgB,GAAKrC,KAAK2B,MAAMQ,gBAC/CnC,KAAK0B,SAAS,CAACS,gBAAgB,IAH/BnC,KAAK0B,SAAS,CAACS,gBAAgB,O,+BAwCnC,OACI,yBAAKjC,UAAU,mBACX,kBAAC,EAAD,CAAeO,eAAe,oBAAoBC,eAAe,oBAAoBC,eAAgBX,KAAKG,MAAMkC,cAAezB,cAAeZ,KAAKG,MAAMJ,SACzJ,yBAAKG,UAAU,kBAAf,KAEI,2BAAOkD,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,KAAK,SAASX,MAAO5C,KAAK2B,MAAMM,YAAauB,SAAUxD,KAAKwC,qBAFtG,QAKA,kBAAC,EAAD,CAAe/B,eAAe,oBAAoBC,eAAe,aAAaC,eAAgBX,KAAK2B,MAAMO,cAAetB,cAAeZ,KAAKG,MAAMJ,SAElJ,4BAAQqD,KAAK,SAASlD,UAAW,UAAYF,KAAKG,MAAMmC,YAAalB,QAASpB,KAAKiD,cAAcQ,KAAKzD,MAAO0D,SAAU1D,KAAK2B,MAAMQ,gBAC9H,0BAAMjC,UAAU,cAAhB,iB,GA1EyBI,IAAMC,WCA9ByB,E,2MAEjBL,MAAQ,CAACM,YAAa,GAAI0B,eAAgB,EAAGxB,gBAAgB,G,EAE7DC,kB,sBAAoB,sBAAAvD,EAAA,sDAEhB,EAAK6C,SAAS,CAACkC,WAAY,EAAKzD,MAAMyD,aACtC,EAAKC,yBAAyB,EAAKlC,MAAMM,aAHzB,2C,EAqBpB6B,uBAAyB,SAACrB,GAEtB,IAAIC,EAAiB,EAAKmB,yBAAyBpB,EAAME,OAAOC,OAG1C,IAAnBF,GAAyB,EAAKf,MAAMQ,eAG/BO,EAAiB,GAAK,EAAKf,MAAMQ,gBACrC,EAAKT,SAAS,CAACS,gBAAgB,IAH/B,EAAKT,SAAS,CAACS,gBAAgB,K,EAOvC0B,yBAA2B,SAAChB,GACxB,IAAIc,EAAiBZ,OAAOC,WAAW,EAAK7C,MAAMyD,YAAcf,EAAc,MAE9E,OADA,EAAKnB,SAAS,CAACiC,eAAgBA,EAAgB1B,YAAaY,IACrDc,G,EAGXI,e,sBAAiB,sBAAAlF,EAAA,sEACP,EAAKsB,MAAM4D,eAAe,EAAKpC,MAAMgC,gBAD9B,2C,kFAlCET,EAAWC,GAEtBD,EAAUU,aAAe5D,KAAKG,MAAMyD,YACpC5D,KAAK6D,yBAAyB7D,KAAK2B,MAAMM,aAIZ,IAA9BjC,KAAK2B,MAAMgC,gBAAyB3D,KAAK2B,MAAMQ,eAG1CnC,KAAK2B,MAAMgC,eAAiB,GAAK3D,KAAK2B,MAAMQ,gBAChDnC,KAAK0B,SAAS,CAACS,gBAAgB,IAH/BnC,KAAK0B,SAAS,CAACS,gBAAgB,M,+BA+BnC,OACI,yBAAKjC,UAAU,mBACX,kBAAC,EAAD,CAAeO,eAAe,oBAAoBC,eAAe,mBAAmBC,eAAgBX,KAAKG,MAAMyD,WAAYhD,cAAeZ,KAAKG,MAAMJ,SACrJ,yBAAKG,UAAU,kBAAf,KAEI,2BAAOkD,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,KAAK,SAASX,MAAO5C,KAAK2B,MAAMM,YAAauB,SAAUxD,KAAK8D,yBAFtG,QAKA,kBAAC,EAAD,CAAerD,eAAe,oBAAoBC,eAAe,gBAAgBC,eAAgBX,KAAK2B,MAAMgC,eAAgB/C,cAAeZ,KAAKG,MAAMJ,SAEtJ,4BAAQqD,KAAK,SAASlD,UAAW,UAAYF,KAAKG,MAAMmC,YAAaoB,SAAU1D,KAAK2B,MAAMQ,eAAgBf,QAASpB,KAAK+D,gBACpH,0BAAM7D,UAAU,cAAhB,kB,GA5DyBI,IAAMC,WCI9ByD,E,2MAEjBrC,MAAQ,CACJsC,cAAe,KACflE,OAAQ,KACRmE,YAAa,EACb7B,cAAe,EACf8B,WAAY,EACZC,QAAS,EACTC,WAAY,EACZT,WAAY,EACZU,cAAe,EACfC,WAAY,EACZC,cAAe,EACfC,mBAAoB,GACpBC,oBAAqB,GACrBC,kBAAmB,GACnBC,sBAAsB,G,EAG1BxC,kB,sBAAoB,sBAAAvD,EAAA,sDAGhB,EAAK8C,MAAMsC,cAAgB,EAAK9D,MAAM8D,cACtC,EAAKvC,SAAS,CACVuC,cAAe,EAAKtC,MAAMsC,cAC1BlE,OAAQ,EAAKI,MAAM8D,cAAclE,OACjCmE,YAAa,EAAK/D,MAAM8D,cAAcC,YACtCW,aAAc,EAAK1E,MAAM8D,cAAcY,eAG3C,EAAKC,qBAGL,EAAK7B,cAAgB,EAAKA,cAAcQ,KAAnB,gBACrB,EAAKM,eAAiB,EAAKA,eAAeN,KAApB,gBAGtB,EAAKsB,iCAGL,EAAKC,kCAEsC,IAAxC,EAAK7E,MAAM8D,cAAcM,YACxB,EAAK7C,SAAS,CAACkD,sBAAsB,IAIzC,EAAKK,sBAAwBC,YAAW,sBAAC,4BAAArG,EAAA,sEAClB,EAAKsG,qBADa,OACjCC,EADiC,OAErC,EAAKjF,MAAMkF,qBAGG,IAAXD,GAAiB,EAAKzD,MAAMiD,qBAGvBQ,EAAS,GAAK,EAAKzD,MAAMiD,sBAC7B,EAAKlD,SAAS,CAACkD,sBAAsB,IAHrC,EAAKlD,SAAS,CAACkD,sBAAsB,IANJ,2CAWtC,KAvCa,2C,EA0CpBU,qB,sBAAuB,sBAAAzG,EAAA,sDAEnB0G,cAAc,EAAKN,uBAFA,2C,EAKvBH,mB,sBAAqB,sBAAAjG,EAAA,sDACjB,EAAK6C,SAAS,CACV0C,QAAS,EAAKzC,MAAMsC,cAAcG,QAClCC,WAAY,EAAK1C,MAAMsC,cAAcI,WACrCF,WAAY,EAAKxC,MAAMsC,cAAcE,WACrC9B,cAAe,EAAKV,MAAMsC,cAAc5B,cACxCuB,WAAY,EAAKjC,MAAMsC,cAAcL,WACrCU,cAAe,EAAK3C,MAAMsC,cAAcK,cACxCC,WAAY,EAAK5C,MAAMsC,cAAcM,WACrCC,cAAe,EAAK7C,MAAMsC,cAAcO,gBAT3B,2C,EAarBgB,qB,sBAAuB,sBAAA3G,EAAA,sEAEb,EAAK8C,MAAMsC,cAAcwB,wBAFZ,OAMhB,EAAK9D,MAAMwC,YAAc,EAAKxC,MAAMsC,cAAcE,aACjD,EAAKxC,MAAMsC,cAAcK,cAAgB,EAAK3C,MAAMsC,cAAcL,WAAa,EAAKjC,MAAMsC,cAAcE,WACxG,EAAKzC,SAAS,CAAC4C,cAAe,EAAK3C,MAAMsC,cAAcK,iBAG3D,EAAK5C,SAAS,CACV0C,QAAS,EAAKzC,MAAMsC,cAAcG,QAClCC,WAAY,EAAK1C,MAAMsC,cAAcI,WACrCF,WAAY,EAAKxC,MAAMsC,cAAcE,aAdtB,2C,EAkBvBuB,uB,sBAAyB,sBAAA7G,EAAA,sEACf,EAAK8C,MAAMsC,cAAcyB,yBADV,OAErB,EAAKhE,SAAS,CACVW,cAAe,EAAKV,MAAMsC,cAAc5B,cACxCuB,WAAY,EAAKjC,MAAMsC,cAAcL,WACrCU,cAAe,EAAK3C,MAAMsC,cAAcK,cACxCC,WAAY,EAAK5C,MAAMsC,cAAcM,WACrCC,cAAe,EAAK7C,MAAMsC,cAAcO,gBAPvB,2C,EAWzBmB,uB,uCAAyB,WAAMC,GAAN,SAAA/G,EAAA,sEACf,EAAK8C,MAAMsC,cAAc0B,uBAAuBC,GADjC,OAErB,EAAKlE,SAAS,CACVW,cAAe,EAAKV,MAAMsC,cAAc5B,cACxCuB,WAAY,EAAKjC,MAAMsC,cAAcL,WACrCU,cAAe,EAAK3C,MAAMsC,cAAcK,gBALvB,2C,wDASzBa,mB,sBAAqB,4BAAAtG,EAAA,sEACE,EAAK8C,MAAMsC,cAAc4B,mBAD3B,cACbT,EADa,OAEjB,EAAK1D,SAAS,CAAC6C,WAAY,EAAK5C,MAAMsC,cAAcM,WAAYC,cAAe,EAAK7C,MAAMsC,cAAcO,gBAFvF,kBAGVY,GAHU,2C,EAMrBU,6B,sBAA+B,sBAAAjH,EAAA,sDAC3B,EAAK6C,SAAS,CACV4C,cAAe,EAAK3C,MAAMsC,cAAcL,WAAa,EAAKjC,MAAMwC,aAFzC,2C,EAS/BY,+B,sBAAiC,8BAAAlG,EAAA,sEAEJ,EAAK8C,MAAMsC,cAAc8B,kBAFrB,cAEzBC,EAFyB,OAGzBC,EAAS,EAAKtE,MAAMsC,cAAciC,YAHT,SAMvBD,EACLE,oBAAoBH,GACpBI,GAAG,OAFE,uCAEM,WAAM3D,GAAN,SAAA5D,EAAA,6DAIL4D,EAAM4D,aAAa,KAAO,EAAK1E,MAAMsC,cAAchF,SACnDwD,EAAM4D,aAAa,KAAO,EAAK1E,MAAMsC,cAAcqC,SAClD,EAAKX,uBAAuBrH,IAAca,aAAasD,EAAM4D,aAAa,KANtE,SAUF,EAAKb,sBAAqB,GAVxB,OAYR,EAAKrF,MAAMkF,qBAZH,2CAFN,uDANuB,2C,EA4BhCL,gC,sBAAkC,8BAAAnG,EAAA,sEAEN,EAAK8C,MAAMsC,cAAc8B,kBAFnB,cAE3BC,EAF2B,OAG3BC,EAAS,EAAKtE,MAAMsC,cAAciC,YAHP,SAMzBD,EACLM,cAAcP,GACdI,GAAG,OAFE,uCAEM,WAAM3D,GAAN,SAAA5D,EAAA,sDAIL4D,EAAM4D,aAAa,KAAO,EAAK1E,MAAMsC,cAAchF,SACnDwD,EAAM4D,aAAa,KAAO,EAAK1E,MAAMsC,cAAcqC,UAClD,EAAKnB,qBAEL,EAAKhF,MAAMkF,sBARP,2CAFN,uDANyB,2C,EAwBnCpC,c,uCAAgB,WAAO2C,GAAP,SAAA/G,EAAA,yDAGyB,mBAAlC,EAAK8C,MAAM8C,mBAHF,uBAKR,EAAK/C,SAAS,CAAC+C,mBAAoB,mBAL3B,kBASE,EAAK9C,MAAMsC,cAAchB,cAAc2C,GATzC,uBAYJ,EAAKlE,SAAS,CAAC+C,mBAAoB,KAZ/B,uE,wDAoBhBV,e,uCAAiB,WAAO6B,GAAP,SAAA/G,EAAA,yDAGyB,mBAAnC,EAAK8C,MAAM+C,oBAHD,uBAKT,EAAKhD,SAAS,CAACgD,oBAAqB,mBAL3B,kBAQC,EAAK/C,MAAMsC,cAAcF,eAAe6B,GARzC,uBAWL,EAAKlE,SAAS,CAACgD,oBAAqB,KAX/B,uE,wDAmBjB8B,Y,sBAAc,sBAAA3H,EAAA,yDAG0B,mBAAjC,EAAK8C,MAAMgD,kBAHJ,uBAIN,EAAKjD,SAAS,CAACiD,kBAAmB,mBAJ5B,kBAQI,EAAKhD,MAAMsC,cAAcuC,cAR7B,uBAWF,EAAK9E,SAAS,CAACiD,kBAAmB,KAClC,EAAKjD,SAAS,CAACkD,sBAAsB,IAZnC,uE,wEAkBV,OACI,yBAAK1E,UAAU,iBACX,yBAAKA,UAAWF,KAAK2B,MAAMkD,eAE3B,yBAAK3E,UAAU,gBACX,kBAAC,EAAD,CAAeO,eAAe,oBAAoBC,eAAe,eAAeC,eAAgBX,KAAK2B,MAAMuC,YAAatD,cAAc,OAE1I,yBAAKV,UAAU,oBACX,kBAAC,EAAD,CAAeO,eAAe,oBAAoBC,eAAgB,KAAOV,KAAK2B,MAAM5B,OAAS,IAAKY,eAAgBX,KAAK2B,MAAMwC,WAAYvD,cAAc,MACvJ,kBAAC,EAAD,CAAeH,eAAe,oBAAoBC,eAAe,MAAMC,eAAgBX,KAAK2B,MAAMyC,QAAQ5F,QAAQ,GAAIoC,cAAeZ,KAAK2B,MAAM5B,SAChJ,kBAAC,EAAD,CAAeU,eAAe,oBAAoBC,eAAe,QAAQC,eAAgBX,KAAK2B,MAAM0C,WAAW7F,QAAQ,GAAIoC,cAAc,MACzI,kBAAC,EAAD,CAAeH,eAAe,oBAAoBC,eAAe,cAAcC,eAAgBX,KAAK2B,MAAMiC,WAAWpF,QAAQ,GAAIoC,cAAeZ,KAAK2B,MAAM5B,SAC3J,kBAAC,EAAD,CAAeU,eAAe,oBAAoBC,eAAe,gBAAgBC,eAAgBX,KAAK2B,MAAM2C,cAAc9F,QAAQ,GAAIoC,cAAc,OAExJ,kBAAC,EAAD,KACI,yBAAKS,MAAM,WACP,kBAAC,EAAD,CAASgB,cAAerC,KAAK2B,MAAMU,cAAeY,cAAejD,KAAKiD,cAAelD,OAAQC,KAAK2B,MAAM5B,OAAQuC,YAAatC,KAAK2B,MAAM8C,sBAE5I,yBAAKpD,MAAM,YACP,kBAAC,EAAD,CAAUuC,WAAY5D,KAAK2B,MAAMiC,WAAYG,eAAgB/D,KAAK+D,eAAgBhE,OAAQC,KAAK2B,MAAM5B,OAAQuC,YAAatC,KAAK2B,MAAM+C,wBAG7I,yBAAKxE,UAAU,iBACX,yBAAKA,UAAU,mBACX,uCAEJ,kBAAC,EAAD,CAAeO,eAAe,oBAAoBC,eAAe,aAAaC,eAAgBX,KAAK2B,MAAM4C,WAAW/F,QAAQ,GAAIoC,cAAc,QAC9I,kBAAC,EAAD,CAAeH,eAAe,oBAAoBC,eAAe,eAAeC,eAAgBX,KAAK2B,MAAM6C,cAAchG,QAAQ,GAAIoC,cAAc,MACnJ,4BAAQwC,KAAK,SAASlD,UAAW,UAAYF,KAAK2B,MAAMgD,kBAAmBjB,SAAU1D,KAAK2B,MAAMiD,qBAAsBxD,QAASpB,KAAKwG,aAChI,0BAAMtG,UAAU,cAAhB,uB,GA/QmBI,IAAMC,WCJ5BkG,E,iLAER,IAAD,OAEJ,OACI,yBAAKvG,UAAU,YACX,yBAAKA,UAAU,QAAf,mBACA,yBAAKA,UAAU,iBAEPwG,OAAOC,QAAQ3G,KAAKG,MAAMyG,YAAYC,OAAOhF,KAAI,YAAgB,IAAD,mBAAbE,EAAa,KAATa,EAAS,KAC5D,OAAO,kBAAC,EAAD,CAAeb,IAAKA,EAAKkC,cAAerB,EAAOyC,mBAAoB,EAAKlF,MAAMkF,8B,GAVtE/E,IAAMC,WCE5BuG,E,2MAEjBnF,MAAQ,CAACb,YAAa,EAAGE,sBAAuB,EAAGC,mBAAoB,EAAGC,sBAAuB,G,EAEjGkB,kB,sBAAoB,sBAAAvD,EAAA,sDAChB,EAAKwG,qBADW,2C,EAKpBA,mBAAqB,WACjB,EAAKlF,MAAMyG,YAAYG,0BACvB,EAAKrF,SAAS,CACVZ,YAAa,EAAKX,MAAMyG,YAAY9F,YACpCE,sBAAuB,EAAKb,MAAMyG,YAAY5F,sBAC9CC,mBAAoB,EAAKd,MAAMyG,YAAY3F,mBAC3CC,sBAAuB,EAAKf,MAAMyG,YAAY1F,yB,wEAKlD,OACI,6BACI,kBAAC,EAAD,CAAQjC,QAASe,KAAKG,MAAMlB,QAASoB,QAASL,KAAKG,MAAME,QAASD,SAAUJ,KAAKG,MAAMC,WACvF,kBAAC,EAAD,CAAaU,YAAad,KAAK2B,MAAMb,YAAaE,sBAAuBhB,KAAK2B,MAAMX,sBAAuBC,mBAAoBjB,KAAK2B,MAAMV,mBAAoBC,sBAAuBlB,KAAK2B,MAAMT,wBAChM,kBAAC,EAAD,CAAe0F,YAAa5G,KAAKG,MAAMyG,YAAavB,mBAAoBrF,KAAKqF,0B,GAxBnD/E,IAAMC,WCH3ByG,EAEjB,WAAYC,EAAWtI,EAAUuI,GAAkB,IAAD,gCAOlDC,oBAPkD,sBAO5B,sBAAAtI,EAAA,kEACXP,IADW,SACsB,EAAK8I,SAASrI,QAAQsI,mBAAmBnI,OAD/D,iDACGC,aADH,4DAP4B,KAYlDmI,oBAZkD,sBAY5B,sBAAAzI,EAAA,kEACXP,IADW,SACsB,EAAK8I,SAASrI,QAAQwI,mBAAmBrI,OAD/D,iDACGC,aADH,4DAZ4B,KAiBlDqI,oBAjBkD,uCAiB5B,WAAMC,GAAN,SAAA5I,EAAA,kEACXP,IADW,SACsB,EAAK8I,SAASrI,QAAQyI,oBAAoBC,GAAUvI,OAD1E,iDACGC,aADH,4DAjB4B,2DAsBlDuI,MAtBkD,uCAsB1C,WAAMD,EAAU7B,GAAhB,SAAA/G,EAAA,sEACS,EAAKuI,SAASrI,QAAQ2I,MAAMD,EAAUnJ,IAAcqB,aAAaiG,IAAUhG,KAAK,CAACC,KAAM,EAAKZ,UADrG,mFAtB0C,6DA2BlD0I,QA3BkD,uCA2BxC,WAAMF,EAAU7B,GAAhB,SAAA/G,EAAA,sEACA,EAAKuI,SAASrI,QAAQ4I,QAAQF,EAAUnJ,IAAcqB,aAAaiG,IAAUhG,KAAK,CAACC,KAAM,EAAKZ,UAD9F,2CA3BwC,6DAgClD2I,oBAhCkD,uCAgC5B,WAAMH,GAAN,SAAA5I,EAAA,kEACXP,IADW,SACsB,EAAK8I,SAASrI,QAAQ8I,gBAAgBJ,GAAUvI,KAAK,CAACW,KAAM,EAAKZ,UADvF,iDACGE,aADH,4DAhC4B,2DAqClD2I,gBArCkD,uCAqChC,WAAML,GAAN,SAAA5I,EAAA,kEACPP,IADO,SAC0B,EAAK8I,SAASrI,QAAQ+I,gBAAgBL,GAAUvI,KAAK,CAACW,KAAM,EAAKZ,UAD3F,iDACOE,aADP,4DArCgC,2DA0ClD4I,gBA1CkD,uCA0ChC,WAAMN,GAAN,SAAA5I,EAAA,sEACR,EAAKuI,SAASrI,QAAQyH,YAAYiB,GAAU7H,KAAK,CAACC,KAAM,EAAKZ,UADrD,2CA1CgC,2DA+ClD+I,uBA/CkD,uCA+CzB,WAAMP,GAAN,SAAA5I,EAAA,kEACdP,IADc,SACmB,EAAK8I,SAASrI,QAAQkJ,mBAAmBR,GAAUvI,KAAK,CAACW,KAAM,EAAKZ,UADvF,oCACAE,aADA,kCACoG,IADpG,iDA/CyB,2DAsDlD+I,cAtDkD,uCAsDlC,WAAMT,GAAN,SAAA5I,EAAA,kEACLP,IADK,SACoC,EAAK8I,SAASrI,QAAQmJ,cAAcT,GAAUvI,OADlF,iDACSiJ,qBADT,4DAtDkC,2DA6DlDC,kBAAoB,WAChB,OAAO,EAAKhB,SAASnB,QA9DyB,KAoElDoC,oBApEkD,sBAoE5B,4BAAAxJ,EAAA,kEAGN,CACJ+D,MAAO,IAJG,SAMG,EAAK0F,iBANR,0BAEdC,EAFc,CAGdC,OAHc,KAMdC,UANc,wBASXF,GATW,2CAnElBvI,KAAKoH,SAAWH,EAChBjH,KAAKf,QAAUN,EACfqB,KAAKsI,eAAiBpB,G,iBCuCfwB,EA5CC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAlK,EAAA,0DAE1BiK,OAAOE,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKJ,OAAOE,UAHD,kBAMpBF,OAAOE,SAASG,SANI,OAQ1BP,EAAQK,GAERH,OAAOE,SAAS5C,GAAG,mBAAmB,WACpC0C,OAAOM,SAASC,YAGlBP,OAAOE,SAAS5C,GAAG,gBAAgB,WACjC0C,OAAOM,SAASC,YAfQ,kDAmB1BR,EAAO,EAAD,IAnBoB,gCAuBrBC,OAAOG,MAERA,EAAOH,OAAOG,KACpB1J,QAAQC,IAAI,2BACZoJ,EAAQK,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtB/J,QAAQC,IAAI,gDACZoJ,EAAQK,IApCoB,+D,SCHfjF,EAEjB,WAAYyF,EAAoBC,EAAgB/K,EAAUgL,EAAcC,EAAYC,GAAgB,IAAD,gCAcnGC,WAdmG,sBActF,4BAAAjL,EAAA,sEAEW,EAAKkL,eAAejK,iBAF/B,cAET,EAAKC,OAFI,gBAGO,EAAKiK,kBAAkBhC,uBAAuB,EAAK1B,SAH1D,cAGH2D,EAHG,OAIT,EAAK/F,YAAcgG,KAAKC,MAAU,MAAJF,GAJrB,SAKH,EAAKxE,wBALF,wBAMH,EAAKC,yBANF,4CAdsF,KA0BnGD,sBA1BmG,sBA0B3E,sBAAA5G,EAAA,sEACC,EAAKmL,kBAAkBxC,oBAAoB,EAAKlB,SADjD,cACpB,EAAKlC,QADe,gBAEI,EAAK8D,gBAFT,OAEpB,EAAK/D,WAFe,OAGpB,EAAKE,WAAa,EAAKD,QAAU,EAAKD,WAHlB,2CA1B2E,KAmCnGuB,uBAnCmG,sBAmC1E,sBAAA7G,EAAA,sEACG,EAAKmL,kBAAkBpC,oBAAoB,EAAKtB,SADnD,cACrB,EAAK1C,WADgB,OAErB,EAAKU,cAAgB,EAAKV,WAAa,EAAKO,WAFvB,SAGM,EAAK4F,eAAenL,aAH1B,cAGrB,EAAKyD,cAHgB,gBAIf,EAAKwD,mBAJU,2CAnC0E,KA8CnGF,uBA9CmG,uCA8C1E,WAAMC,GAAN,SAAA/G,EAAA,6DACrB,EAAK+E,WAAagC,EAClB,EAAKtB,cAAgB,EAAKV,WAAa,EAAKO,WAFvB,SAGM,EAAK4F,eAAenL,aAH1B,OAGrB,EAAKyD,cAHgB,kDA9C0E,2DAuDnGwD,iBAvDmG,sBAuDhF,sBAAAhH,EAAA,sEACS,EAAKmL,kBAAkBlC,gBAAgB,EAAKxB,SADrD,cACf,EAAK/B,WADU,gBAEY,EAAKA,WAFjB,+BAE8B,EAAKJ,WAAlD,EAAKK,cAFU,4BAGR,EAAKD,YAHG,2CAvDgF,KAgEnG2D,cAhEmG,sBAgElF,sBAAArJ,EAAA,0DACa,EAAKuL,YADlB,qBACgC,EAAKC,UADrC,sCACuD,EAAKL,kBAAkB9B,cAAc,EAAK5B,SADjG,mDACL,EAAKnC,WADA,iDAhEkF,KAuEnGlB,cAvEmG,uCAuEnF,WAAOqH,GAAP,SAAAzL,EAAA,sEACN,EAAKkL,eAAe3K,QAAQ,EAAK4K,kBAAkB5C,SAASK,SAAU6C,GADhE,uBAEN,EAAKN,kBAAkBtC,MAAM,EAAKpB,QAASgE,GAFrC,2CAvEmF,2DA+EnGvG,eA/EmG,uCA+ElF,WAAO6B,GAAP,SAAA/G,EAAA,sEACP,EAAKmL,kBAAkBrC,QAAQ,EAAKrB,QAASV,GADtC,2CA/EkF,2DAsFnGY,YAtFmG,sBAsFrF,sBAAA3H,EAAA,sEACJ,EAAKmL,kBAAkBjC,gBAAgB,EAAKzB,SADxC,2CAtFqF,KA6FnGJ,UAAY,WACR,OAAO,EAAK8D,kBAAkB5B,qBA9FiE,KAoGnGrC,gBApGmG,sBAoGjF,sBAAAlH,EAAA,sEACD,EAAKmL,kBAAkB3B,sBADtB,mFAlGdrI,KAAKgK,kBAAoBP,EACzBzJ,KAAKsG,QAAUoD,EAAejC,SAC9BzH,KAAK+J,eAAiB,IAAItL,IAAeiL,EAAgB/K,GACzDqB,KAAKoK,YAAcT,EACnB3J,KAAKqK,UAAYT,EACjB5J,KAAKf,QAAUN,EACfqB,KAAK6E,aAAegF,GCVPU,EAEjB,WAAYd,GAAqB,IAAD,gCAahCe,WAbgC,uCAanB,WAAOC,EAAKf,EAAgB/K,EAAUgL,EAAcC,EAAYC,GAAhE,eAAAhL,EAAA,6DAEH6L,EAAO,IAAI1G,EAAc,EAAKgG,kBAAmBN,EAAgB/K,EAAUgL,EAAcC,EAAYC,GAFlG,SAGHa,EAAKZ,aAHF,OAKT,EAAKjD,MAAM4D,GAAOC,EALT,2CAbmB,qEAwBhC3D,wBAA0B,WAEtB,IAAI4D,EAAM,EACNC,EAAgB,EAChBrG,EAAa,EACbC,EAAgB,EAEpB,IAAK,IAAIkG,KAAQ,EAAK7D,MAClB8D,GAAO,EAAK9D,MAAM6D,GAAMtG,QAAU,EAAKyC,MAAM6D,GAAMvG,WACnDyG,GAAiB,EAAK/D,MAAM6D,GAAM9G,WAAa,EAAKiD,MAAM6D,GAAMvG,WAChEI,GAAc,EAAKsC,MAAM6D,GAAMnG,WAC/BC,GAAiB,EAAKqC,MAAM6D,GAAMlG,cAGtC,EAAK1D,YAAc6J,EACnB,EAAK3J,sBAAwB4J,EAC7B,EAAK3J,mBAAqBsD,EAC1B,EAAKrD,sBAAwBsD,GAvC7BxE,KAAKgK,kBAAoBP,EACzBzJ,KAAK6G,MAAQ,GACb7G,KAAKc,YAAc,EACnBd,KAAKgB,sBAAwB,EAC7BhB,KAAK6K,eAAiB,EACtB7K,KAAK8K,kBAAoB,GCkGlBC,G,kNA9FbpJ,MAAQ,CAAEqJ,aAAc,EACtB/B,KAAM,KACNhK,QAAS,KACTgM,iBAAkB,KAClB5K,QAAS,KACTuG,YAAa,KACbxG,SAAU,G,EAGZgC,kB,sBAAoB,4DAAAvD,EAAA,+EAGG6J,IAHH,cAGVO,EAHU,gBAMOA,EAAKiC,IAAIC,cANhB,cAMVC,EANU,gBASQnC,EAAKiC,IAAIG,IAAIC,QATrB,cASVC,EATU,OAUVC,EAAkBC,EAAaC,SAASH,GACxCN,EAAmB,IAAIhC,EAAKiC,IAAIS,SACpCF,EAAaG,IACbJ,GAAmBA,EAAgBlF,SAI/BuF,EAAqBC,EAAIJ,SAASH,GAClCQ,EAAc,IAAI9C,EAAKiC,IAAIS,SAC/BG,EAAIF,IACJC,GAAsBA,EAAmBvF,SAIrC0F,EAAqBC,EAAIP,SAASH,GAClCW,EAAc,IAAIjD,EAAKiC,IAAIS,SAC/BM,EAAIL,IACJI,GAAsBA,EAAmB1F,SAKvC6F,EAAe,IAAIlD,EAAKiC,IAAIS,SAASS,EAAMR,IAAK,8CAhCpC,UAmCIX,EAAiBlM,QAAQsN,QAAQnN,OAnCrC,eAmCVmN,EAnCU,OAoCVpN,EAAUmM,EAAS,GACnB/K,EAAUgM,IAAUpN,EAIpB+K,EAAoB,IAAIhD,EAAkBiE,EAAkBhM,EAAxC,sBAAiD,sBAAAJ,EAAA,sDACzEoK,EAAKiC,IAAI5C,iBADgE,4CAzC3D,UA8CY0B,EAAkB7C,sBA9C9B,eA8CVmF,EA9CU,iBA+CYtC,EAAkB1C,sBA/C9B,eA+CViF,EA/CU,OAkDV3F,EAAc,IAAI2D,EAAYP,GAlDpB,UAmDVpD,EAAY4D,WAAW,EAAGuB,EAAa9M,GAAS,EAAMqN,EAAe,WAnD3D,yBAoDV1F,EAAY4D,WAAW,EAAG0B,EAAajN,GAAS,EAAMsN,EAAe,WApD3D,yBAqDV3F,EAAY4D,WAAW,EAAG2B,EAAclN,GAAS,EAAO,EAAG,YArDjD,QAyDhB,EAAKyC,SAAS,CAAEuH,OACdhK,QAASA,EACToB,QAASA,EACT4K,iBAAkBA,EAClBrE,YAAaA,EACbxG,SAAUkM,IA9DI,kDAkEhBE,MAAM,0EAGNjN,QAAQkN,MAAR,MArEgB,0D,wEA0ElB,OAAKzM,KAAK2B,MAAMsH,KAId,yBAAK/I,UAAU,OACb,kBAAC,EAAD,CAAcjB,QAASe,KAAK2B,MAAM1C,QAASoB,QAASL,KAAK2B,MAAMtB,QAASD,SAAUJ,KAAK2B,MAAMvB,SAAWwG,YAAa5G,KAAK2B,MAAMiF,eAJ3H,4E,GArFKrG,cCFEmM,QACW,cAA7B5D,OAAOM,SAASuD,UAEe,UAA7B7D,OAAOM,SAASuD,UAEhB7D,OAAOM,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9a13b72a.chunk.js","sourcesContent":["const BigNumber = require('bignumber.js');\r\n\r\nexport default class RateConverter {\r\n\r\n    static convertToEth(_price) {\r\n        return _price / 1e18;\r\n    }\r\n\r\n    static convertToWei(_price) {\r\n        return BigNumber(_price * 1e18).toFixed();\r\n    }\r\n\r\n    static convertFromPriceFeed(_price) {\r\n        return _price / 1e8;\r\n    }\r\n}","import RateConverter from \"../utils/rateConverter.js\";\r\n\r\nexport default class TokenRequester {\r\n\r\n    constructor(_token, _account) {\r\n        this.token = _token;\r\n        this.account = _account;\r\n    }\r\n\r\n    /** Get the token balance for the connected account */\r\n    getBalance = async() => {\r\n        return RateConverter.convertToEth(await this.token.methods.balanceOf(this.account).call());\r\n    }\r\n\r\n    /** Approve the transaction on the token constract */\r\n    approve = async(_contractAddress, _valueToStake) => {\r\n        console.log(process.versions)\r\n        return await this.token.methods.approve(_contractAddress, RateConverter.convertToWei(_valueToStake)).send({from: this.account});\r\n    }\r\n\r\n    getTokenSymbol = async() => {\r\n        return await this.token.methods.symbol().call();\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Header\">\r\n                <div className=\"sign\">\r\n                    Hell<span className=\"fast-flicker\">o</span>_World Protoc<span className=\"flicker\">o</span>l\r\n                </div>\r\n                <div className='HeaderInfo'>\r\n                    <div className='HwtConversion'>\r\n                        <span>1 HWT</span>\r\n                        <span>{this.props.hwtPrice} USD</span>\r\n                    </div>\r\n                    <div className='AccountData'>\r\n                        <div>{this.props.account}</div>\r\n                        <div className={`OwnerStatus ${this.props.isOwner ? \"\" : \"HideComponent\"}`}>owner</div>      \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class DataContainer extends React.Component {\r\n    \r\n    render(){\r\n        return(\r\n            <div className={this.props.containerClass}>\r\n                <span className='Indicator'>{this.props.indicatorTitle}</span><span>{this.props.indicatorValue} {this.props.indicatorUnit}</span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport DataContainer from './DataContainer.js';\r\n\r\nexport default class ProtocolData extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"ProtocolData\">\r\n                <h3>Protocol</h3>\r\n                <DataContainer containerClass='DataContainer' indicatorTitle='TVL' indicatorValue={this.props.allPoolsTvl.toFixed(2)} indicatorUnit='$'/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport DataContainer from './DataContainer.js';\r\nimport RateConverter from \"../utils/rateConverter.js\";\r\n\r\nexport default class GeneralData extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"UserData\">\r\n                <h3>User</h3>\r\n                <DataContainer containerClass='DataContainer' indicatorTitle='Total Staked Amount' indicatorValue={this.props.allPoolsUserStakedUsd.toFixed(2)} indicatorUnit='$'/>\r\n                <DataContainer containerClass='DataContainer' indicatorTitle='Total Reward HWT' indicatorValue={this.props.allPoolsUserReward} indicatorUnit='HWT'/>\r\n                <DataContainer containerClass='DataContainer' indicatorTitle='Total Reward Amount' indicatorValue={this.props.allPoolsUserRewardUsd.toFixed(2)} indicatorUnit='$'/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ProtocolData from './ProtocolData.js';\r\nimport UserData from './UserData.js';\r\n\r\nexport default class GeneralData extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className='GeneralDataContainer'>\r\n                <div className=\"flux\">General data </div>\r\n                <div className='GeneralData'>\r\n                    <ProtocolData allPoolsTvl={this.props.allPoolsTvl} />\r\n                    <UserData  allPoolsUserStakedUsd={this.props.allPoolsUserStakedUsd} allPoolsUserReward={this.props.allPoolsUserReward} allPoolsUserRewardUsd={this.props.allPoolsUserRewardUsd} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Tab extends React.Component {\r\n\r\n  static propTypes = { activeTab: PropTypes.string.isRequired, label: PropTypes.string.isRequired };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n\r\n    let className = 'Tab-list-item';\r\n\r\n    if (this.props.activeTab === this.props.label) {\r\n      className += ' Tab-list-active';\r\n    }\r\n\r\n    return (\r\n      <li className={className} onClick={this.onClick}>\r\n        {this.props.label}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport WithdrawDepositTab from './WithdrawDepositTab.js';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Tabs extends React.Component {\r\n\r\n    static propTypes = { children: PropTypes.instanceOf(Array).isRequired }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { activeTab: this.props.children[0].props.label };\r\n    }\r\n    \r\n    onClickTabItem = (tab) => {\r\n        this.setState({ activeTab: tab });\r\n    }\r\n\r\n    render() {\r\n        const { onClickTabItem, props: { children }, state: { activeTab }} = this;\r\n    \r\n        return (\r\n          <div className=\"WithdrawDepositTabs\">\r\n            <ol className=\"Tab-list\">\r\n              {children.map((child) => {\r\n                const { label } = child.props;\r\n    \r\n                return (\r\n                  <WithdrawDepositTab activeTab={activeTab} key={label} label={label} onClick={onClickTabItem} />\r\n                );\r\n              })}\r\n            </ol>\r\n            <div className=\"Tab-content\">\r\n              {children.map((child) => {\r\n                if (child.props.label !== activeTab) return undefined;\r\n                return child.props.children;\r\n              })}\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport DataContainer from \"./DataContainer.js\";\r\n\r\nexport default class DepositWithdraw extends React.Component {\r\n\r\n    state = { sliderValue: 50, depositAmount: 0, isButtonLocked: false };\r\n\r\n    componentDidMount = async () => {\r\n        \r\n        // Set the balance and initialize the slider\r\n        this.setState({walletBalance: this.props.walletBalance, buttonClass: \"\"});\r\n        this.recomputeTokenToDeposit(this.state.sliderValue);\r\n\r\n        // Lock the button if there is a zero balance\r\n        if(this.props.walletBalance === 0) {\r\n            this.setState({isButtonLocked: true});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // If an external event update the walletBalance, the tokenToDeposit Amount have to be recomputed\r\n        if (prevProps.walletBalance !== this.props.walletBalance) {\r\n            this.recomputeTokenToDeposit(this.state.sliderValue);\r\n\r\n            // State of the button, to activate or disable it\r\n        if(this.props.walletBalance === 0 && !this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: true});\r\n        }\r\n        else if(this.props.walletBalance > 0 && this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: false});\r\n        } \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the token to deposit - Triggered when the user move the slider\r\n     */\r\n    computeTokenAmount = (event) => {\r\n        let computedAmount = this.recomputeTokenToDeposit(event.target.value);\r\n\r\n        // State of the button, to activate or disable it\r\n        if(computedAmount === 0 && !this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: true});\r\n        }\r\n        else if(computedAmount > 0 && this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: false});\r\n        } \r\n    }\r\n\r\n    /**\r\n     * Compute the token to deposite\r\n     */\r\n    recomputeTokenToDeposit= (_sliderValue) => {\r\n        let computeAmount = Number.parseFloat(this.props.walletBalance * (_sliderValue / 100));\r\n        this.setState({depositAmount: computeAmount, sliderValue: _sliderValue});\r\n        return computeAmount;\r\n    }\r\n\r\n    /**\r\n     * Call the deposit method - Triggered when the user click on the deposit button\r\n     */\r\n    depositTokens = async () => {\r\n        await this.props.depositTokens(this.state.depositAmount);     \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='DepositWithdraw'>\r\n                <DataContainer containerClass='PoolDataContainer' indicatorTitle='Wallet balance : ' indicatorValue={this.props.walletBalance} indicatorUnit={this.props.symbol}/>\r\n                <div className='SliderSelector'>\r\n                    0%\r\n                    <input type=\"range\" min=\"0\" max=\"100\" step=\"0.0001\" value={this.state.sliderValue} onChange={this.computeTokenAmount}></input>\r\n                    100%\r\n                </div>\r\n                <DataContainer containerClass='PoolDataContainer' indicatorTitle='Deposit : ' indicatorValue={this.state.depositAmount} indicatorUnit={this.props.symbol}/>\r\n            \r\n                <button type=\"Button\" className={\"Button \" + this.props.buttonClass} onClick={this.depositTokens.bind(this)} disabled={this.state.isButtonLocked}>\r\n                    <span className=\"ButtonText\">Deposit</span>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport DataContainer from \"./DataContainer.js\";\r\n\r\nexport default class DepositWithdraw extends React.Component {\r\n\r\n    state = {sliderValue: 50, withdrawAmount: 0, isButtonLocked: false};\r\n\r\n    componentDidMount = async () => {\r\n        // Set the balance and initialize the slider\r\n        this.setState({userStaked: this.props.userStaked});\r\n        this.recomputeTokenToWithdraw(this.state.sliderValue);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // If an external event update the walletBalance, the tokenToDeposit Amount have to be recomputed\r\n        if (prevProps.userStaked !== this.props.userStaked) {\r\n            this.recomputeTokenToWithdraw(this.state.sliderValue);\r\n        }\r\n\r\n        // State of the button, to activate or disable it\r\n        if(this.state.withdrawAmount === 0 && !this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: true});\r\n        }\r\n        else if(this.state.withdrawAmount > 0 && this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: false});\r\n        } \r\n    }\r\n\r\n    computeTokenToWithdraw = (event) => {\r\n\r\n        let computedAmount = this.recomputeTokenToWithdraw(event.target.value);\r\n\r\n        // State of the button, to activate or disable it\r\n        if(computedAmount === 0 && !this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: true});\r\n        }\r\n        else if(computedAmount > 0 && this.state.isButtonLocked) {\r\n            this.setState({isButtonLocked: false});\r\n        } \r\n    }\r\n\r\n    recomputeTokenToWithdraw = (_sliderValue) => {\r\n        let withdrawAmount = Number.parseFloat(this.props.userStaked * (_sliderValue/ 100));\r\n        this.setState({withdrawAmount: withdrawAmount, sliderValue: _sliderValue});\r\n        return withdrawAmount;\r\n    }\r\n\r\n    withdrawTokens = async () => {\r\n        await this.props.withdrawTokens(this.state.withdrawAmount);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='DepositWithdraw'>\r\n                <DataContainer containerClass='PoolDataContainer' indicatorTitle='Staked Amount : ' indicatorValue={this.props.userStaked} indicatorUnit={this.props.symbol}/>\r\n                <div className='SliderSelector'>\r\n                    0%\r\n                    <input type=\"range\" min=\"0\" max=\"100\" step=\"0.0001\" value={this.state.sliderValue} onChange={this.computeTokenToWithdraw}></input>\r\n                    100%\r\n                </div>\r\n                <DataContainer containerClass='PoolDataContainer' indicatorTitle='Withdrawal : ' indicatorValue={this.state.withdrawAmount} indicatorUnit={this.props.symbol}/>\r\n\r\n                <button type=\"Button\" className={\"Button \" + this.props.buttonClass} disabled={this.state.isButtonLocked} onClick={this.withdrawTokens}>\r\n                    <span className=\"ButtonText\">Withdraw</span>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport WithdrawDepositTabs from \"./WithdrawDepositTabs.js\";\r\nimport Deposit from \"./Deposit.js\";\r\nimport Withdraw from \"./Withdraw.js\";\r\nimport DataContainer from \"./DataContainer.js\";\r\nimport RateConverter from \"../utils/rateConverter.js\";\r\n\r\nexport default class LiquidityPool extends React.Component {\r\n\r\n    state = {\r\n        liquidityPool: null, \r\n        symbol: null, \r\n        dailyReward: 0,\r\n        walletBalance: 0, \r\n        tokenPrice: 0, \r\n        poolTvl: 0, \r\n        poolTvlUsd: 0, \r\n        userStaked: 0, \r\n        userStakedUsd: 0, \r\n        userReward: 0, \r\n        userRewardUsd: 0,\r\n        depositButtonClass: \"\",\r\n        withdrawButtonClass: \"\",\r\n        rewardButtonClass: \"\",\r\n        isRewardButtonLocked: false,\r\n    }\r\n    \r\n    componentDidMount = async() => {\r\n\r\n        // Fixed state\r\n        this.state.liquidityPool = this.props.liquidityPool;\r\n        this.setState({\r\n            liquidityPool: this.state.liquidityPool, \r\n            symbol: this.props.liquidityPool.symbol, \r\n            dailyReward: this.props.liquidityPool.dailyReward,\r\n            cssLogoClass: this.props.liquidityPool.cssLogoClass});\r\n\r\n        // Refresh variable state\r\n        this.initializePoolData();\r\n\r\n        // Bind the method triggered by pool buttons Deposit and Withdraw\r\n        this.depositTokens = this.depositTokens.bind(this);\r\n        this.withdrawTokens = this.withdrawTokens.bind(this);\r\n\r\n        // Listen when staked amount is update to refresh data\r\n        this.listenStakedAmountUpdatedEvent();\r\n\r\n        // Listen when reward are offered to refresh data\r\n        this.listenRewardOfferedUpdatedEvent();\r\n\r\n        if(this.props.liquidityPool.userReward === 0) {\r\n            this.setState({isRewardButtonLocked: true});\r\n        }\r\n\r\n        // Create a refresh interval for the reward amount\r\n        this.refreshRewardInterval = setInterval(async () => {\r\n            let reward = await this.updateRewardAmount()\r\n            this.props.updateAllPoolsData();\r\n\r\n            // State of the reward button, to activate or disable it\r\n            if(reward === 0 && !this.state.isRewardButtonLocked) {\r\n                this.setState({isRewardButtonLocked: true});\r\n            }\r\n            else if(reward > 0 && this.state.isRewardButtonLocked) {\r\n                this.setState({isRewardButtonLocked: false});\r\n            } \r\n        }, 10000);     \r\n    }\r\n\r\n    componentWillUnmount = async() => {\r\n        // Clear the interval when component is unmounted to avoir an error\r\n        clearInterval(this.refreshRewardInterval);\r\n    }\r\n\r\n    initializePoolData = async() => {\r\n        this.setState({\r\n            poolTvl: this.state.liquidityPool.poolTvl,\r\n            poolTvlUsd: this.state.liquidityPool.poolTvlUsd, \r\n            tokenPrice: this.state.liquidityPool.tokenPrice,\r\n            walletBalance: this.state.liquidityPool.walletBalance,\r\n            userStaked: this.state.liquidityPool.userStaked,\r\n            userStakedUsd: this.state.liquidityPool.userStakedUsd,\r\n            userReward: this.state.liquidityPool.userReward,\r\n            userRewardUsd: this.state.liquidityPool.userRewardUsd\r\n        });\r\n    }\r\n\r\n    updateGlobalPoolData = async() => {\r\n\r\n        await this.state.liquidityPool.refreshGlobalPoolData();\r\n\r\n        // If token price change, then the usd stakedAmount have to be recomputed\r\n        // This case happens when the event is called\r\n        if(this.state.tokenPrice != this.state.liquidityPool.tokenPrice) {\r\n            this.state.liquidityPool.userStakedUsd = this.state.liquidityPool.userStaked * this.state.liquidityPool.tokenPrice;\r\n            this.setState({userStakedUsd: this.state.liquidityPool.userStakedUsd});\r\n        }\r\n\r\n        this.setState({\r\n            poolTvl: this.state.liquidityPool.poolTvl,\r\n            poolTvlUsd: this.state.liquidityPool.poolTvlUsd, \r\n            tokenPrice: this.state.liquidityPool.tokenPrice,\r\n        });\r\n    }\r\n\r\n    initializeUserPoolData = async() => {\r\n        await this.state.liquidityPool.initializeUserPoolData();\r\n        this.setState({\r\n            walletBalance: this.state.liquidityPool.walletBalance,\r\n            userStaked: this.state.liquidityPool.userStaked,\r\n            userStakedUsd: this.state.liquidityPool.userStakedUsd,\r\n            userReward: this.state.liquidityPool.userReward,\r\n            userRewardUsd: this.state.liquidityPool.userRewardUsd\r\n        });\r\n    }\r\n\r\n    updateUserStakedAmount = async(_amount) => {\r\n        await this.state.liquidityPool.updateUserStakedAmount(_amount);\r\n        this.setState({\r\n            walletBalance: this.state.liquidityPool.walletBalance,\r\n            userStaked: this.state.liquidityPool.userStaked,\r\n            userStakedUsd: this.state.liquidityPool.userStakedUsd,\r\n        });\r\n    }\r\n\r\n    updateRewardAmount = async() => {\r\n        let reward = await this.state.liquidityPool.updateUserReward();\r\n        this.setState({userReward: this.state.liquidityPool.userReward, userRewardUsd: this.state.liquidityPool.userRewardUsd});\r\n        return reward;\r\n    }\r\n\r\n    recomputeUserStakedUsdAmount = async() => {\r\n        this.setState({\r\n            userStakedUsd: this.state.liquidityPool.userStaked * this.state.tokenPrice,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen the Withdraw event to refresh Liquidity pool data\r\n     */\r\n    listenStakedAmountUpdatedEvent = async() => {\r\n\r\n        let eventOptions = await this.state.liquidityPool.getEventOptions()\r\n        let events = this.state.liquidityPool.getEvents();\r\n\r\n        // When amount is unstaked, data should be refresh\r\n        await events\r\n        .StakedAmountUpdated(eventOptions)\r\n        .on('data', async event => {\r\n            \r\n            // Refresh the user pool data only if the event is triggered by the user\r\n            // and for this specific pool\r\n            if(event.returnValues[0] === this.state.liquidityPool.account &&\r\n               event.returnValues[1] === this.state.liquidityPool.address) {\r\n                this.updateUserStakedAmount(RateConverter.convertToEth(event.returnValues[2]));  \r\n            }\r\n\r\n            // Refresh the pool TVL, even if the event isn't for this account\r\n            await this.updateGlobalPoolData(true);\r\n            // Refresh all pools data\r\n            this.props.updateAllPoolsData();\r\n            \r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen the RewardOffered event to refresh Liquidity pool data\r\n     */\r\n     listenRewardOfferedUpdatedEvent = async() => {\r\n\r\n        let eventOptions = await this.state.liquidityPool.getEventOptions()\r\n        let events = this.state.liquidityPool.getEvents();\r\n\r\n        // When amount is unstaked, data should be refresh\r\n        await events\r\n        .RewardOffered(eventOptions)\r\n        .on('data', async event => {\r\n            \r\n            // Refresh the user pool data only if the event is triggered by the user\r\n            // and for this specific pool\r\n            if(event.returnValues[0] === this.state.liquidityPool.account &&\r\n               event.returnValues[1] === this.state.liquidityPool.address) { \r\n                this.updateRewardAmount();\r\n                // Refresh all pools data\r\n                this.props.updateAllPoolsData();\r\n            }           \r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deposit the amount selected by the user - Triggered when user click on the deposit button\r\n     */\r\n    depositTokens = async (_amount) => {\r\n                \r\n        // If button is loading, user can't click again\r\n        if(this.state.depositButtonClass !== \"Button-loading\") {\r\n        \r\n            this.setState({depositButtonClass: \"Button-loading\"});\r\n\r\n            // If the action throw an exception, button come back to original state\r\n            try{\r\n                await this.state.liquidityPool.depositTokens(_amount);\r\n            }\r\n            finally{\r\n                this.setState({depositButtonClass: \"\"});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw the amount selected by the user - Triggered when user click on the withdraw button\r\n     */\r\n    withdrawTokens = async (_amount) => {\r\n        \r\n        // If button is loading, user can't click again\r\n        if(this.state.withdrawButtonClass !== \"Button-loading\") {\r\n\r\n            this.setState({withdrawButtonClass: \"Button-loading\"});\r\n            // If the action throw an exception, button come back to original state\r\n            try{\r\n                await this.state.liquidityPool.withdrawTokens(_amount);\r\n            }\r\n            finally {\r\n                this.setState({withdrawButtonClass: \"\"});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Claim reward from the poll\r\n     */\r\n    claimReward = async () => {\r\n        \r\n        // If button is loading, user can't click again\r\n        if(this.state.rewardButtonClass !== \"Button-loading\") {\r\n            this.setState({rewardButtonClass: \"Button-loading\"});\r\n\r\n            // If the action throw an exception, button come back to original state\r\n            try {\r\n                await this.state.liquidityPool.claimReward();\r\n            }\r\n            finally {\r\n                this.setState({rewardButtonClass: \"\"});\r\n                this.setState({isRewardButtonLocked: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='LiquidityPool'>\r\n                <div className={this.state.cssLogoClass}>\r\n                </div>\r\n                <div className=\"PoolBaseInfo\">\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='Daily reward' indicatorValue={this.state.dailyReward} indicatorUnit='%'/>\r\n                </div>\r\n                <div className=\"PoolStakedAmount\">\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle={'1 ' + this.state.symbol + ':'} indicatorValue={this.state.tokenPrice} indicatorUnit='$'/>\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='TVL' indicatorValue={this.state.poolTvl.toFixed(8)} indicatorUnit={this.state.symbol}/>\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='TVL $' indicatorValue={this.state.poolTvlUsd.toFixed(2)} indicatorUnit='$'/>\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='User staked' indicatorValue={this.state.userStaked.toFixed(8)} indicatorUnit={this.state.symbol}/>\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='User staked $' indicatorValue={this.state.userStakedUsd.toFixed(2)} indicatorUnit='$'/>\r\n                </div>\r\n                <WithdrawDepositTabs>\r\n                    <div label='Deposit'>\r\n                        <Deposit walletBalance={this.state.walletBalance} depositTokens={this.depositTokens} symbol={this.state.symbol} buttonClass={this.state.depositButtonClass}/>\r\n                    </div>\r\n                    <div label='Withdraw'>\r\n                        <Withdraw userStaked={this.state.userStaked} withdrawTokens={this.withdrawTokens} symbol={this.state.symbol} buttonClass={this.state.withdrawButtonClass}/>\r\n                    </div>\r\n                </WithdrawDepositTabs>\r\n                <div className='RewardContent'>\r\n                    <div className='RewardPoolTitle'>\r\n                        <h3>Reward</h3>\r\n                    </div>\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='Reward HWT' indicatorValue={this.state.userReward.toFixed(8)} indicatorUnit='HWT'/>\r\n                    <DataContainer containerClass='PoolDataContainer' indicatorTitle='Reward Value' indicatorValue={this.state.userRewardUsd.toFixed(2)} indicatorUnit='$'/>\r\n                    <button type=\"Button\" className={\"Button \" + this.state.rewardButtonClass} disabled={this.state.isRewardButtonLocked} onClick={this.claimReward}>\r\n                        <span className=\"ButtonText\">Claim reward</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport LiquidityPool from './LiquidityPool.js';\r\n\r\nexport default class PoolContainer extends React.Component {\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className='PoolPart'>\r\n                <div className=\"flux\">Liquidity pools</div>\r\n                <div className='PoolContainer'>\r\n                    {\r\n                        Object.entries(this.props.poolManager.pools).map(([key,value])=>{\r\n                            return <LiquidityPool key={key} liquidityPool={value} updateAllPoolsData={this.props.updateAllPoolsData} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Header from \"./Header.js\";\r\nimport GeneralData from \"./GeneralData.js\";\r\nimport PoolContainer from \"./PoolContainer.js\";\r\n\r\nexport default class AppContainer extends React.Component {\r\n\r\n    state = {allPoolsTvl: 0, allPoolsUserStakedUsd: 0, allPoolsUserReward: 0, allPoolsUserRewardUsd: 0};\r\n\r\n    componentDidMount = async () => {\r\n        this.updateAllPoolsData();\r\n    }\r\n\r\n    // Update all pool data\r\n    updateAllPoolsData = () => {\r\n        this.props.poolManager.recomputeAllGeneralData();\r\n        this.setState({\r\n            allPoolsTvl: this.props.poolManager.allPoolsTvl, \r\n            allPoolsUserStakedUsd: this.props.poolManager.allPoolsUserStakedUsd, \r\n            allPoolsUserReward: this.props.poolManager.allPoolsUserReward, \r\n            allPoolsUserRewardUsd: this.props.poolManager.allPoolsUserRewardUsd\r\n        });\r\n    };\r\n  \r\n    render(){\r\n        return(\r\n            <div>\r\n                <Header account={this.props.account} isOwner={this.props.isOwner} hwtPrice={this.props.hwtPrice} />\r\n                <GeneralData allPoolsTvl={this.state.allPoolsTvl} allPoolsUserStakedUsd={this.state.allPoolsUserStakedUsd} allPoolsUserReward={this.state.allPoolsUserReward} allPoolsUserRewardUsd={this.state.allPoolsUserRewardUsd} />\r\n                <PoolContainer poolManager={this.props.poolManager} updateAllPoolsData={this.updateAllPoolsData} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import RateConverter from \"../utils/rateConverter.js\";\r\n\r\nexport default class ProtocolRequester {\r\n\r\n    constructor(_contract, _account, _getBlockNumber) {\r\n        this.contract = _contract;\r\n        this.account = _account;\r\n        this.getBlockNumber = _getBlockNumber;\r\n    }\r\n\r\n    /** Get the reward Amount of the HWT Token Price */\r\n    getHwtTokenUsdValue = async() => {\r\n        return RateConverter.convertToEth(await this.contract.methods.hwtTokenUsdValue().call());\r\n    }\r\n\r\n    /** Get the reward Amount of the HWT Token Price */\r\n    getFlpTokenUsdValue = async() => {\r\n        return RateConverter.convertToEth(await this.contract.methods.flpTokenUsdValue().call());\r\n    }\r\n\r\n    /** Get the TVL of a pool on the contract */\r\n    getTotalValueLocked = async(_address) => {\r\n        return RateConverter.convertToEth(await this.contract.methods.getTotalValueLocked(_address).call());\r\n    }\r\n\r\n    /** Stake token in account */\r\n    stake = async(_address, _amount) => {\r\n        return await this.contract.methods.stake(_address, RateConverter.convertToWei(_amount)).send({from: this.account});\r\n    }\r\n\r\n    /** Unstake token in account */\r\n    unstake = async(_address, _amount) => {\r\n        await this.contract.methods.unstake(_address, RateConverter.convertToWei(_amount)).send({from: this.account});\r\n    }\r\n\r\n    /** Get staked amount in the pool */\r\n    getPoolStakedAmount = async(_address) => {\r\n        return RateConverter.convertToEth(await this.contract.methods.getStakedAmount(_address).call({from: this.account}));\r\n    }\r\n\r\n    /** Get the reward amount of the pool */\r\n    getRewardAmount = async(_address) => {\r\n        return RateConverter.convertToEth(await this.contract.methods.getRewardAmount(_address).call({from: this.account}));\r\n    }\r\n\r\n    /** Claim the reward from the pool */\r\n    claimPoolReward = async(_address) => {\r\n        await this.contract.methods.claimReward(_address).send({from: this.account});\r\n    }\r\n\r\n    /** Get the pool reward per second in % */\r\n    getPoolRewardPerSecond = async(_address) => {\r\n        return RateConverter.convertToEth(await this.contract.methods.getRewardPerSecond(_address).call({from: this.account})) * 100;\r\n    }\r\n\r\n    /**\r\n     * Get the Token price via Chainlink\r\n     */\r\n    getTokenPrice = async(_address) => {\r\n        return RateConverter.convertFromPriceFeed(await this.contract.methods.getTokenPrice(_address).call());\r\n    }\r\n\r\n    /**\r\n     * Get the contract events\r\n     */\r\n    getProtocolEvents = () => {\r\n        return this.contract.events;\r\n    }\r\n\r\n    /**\r\n     * Get the base options for events from last block\r\n     */\r\n    getBaseEventOptions = async() => {\r\n\r\n        let options = {\r\n            filter: {\r\n                value: [],\r\n            },\r\n            fromBlock: await this.getBlockNumber()\r\n        };\r\n\r\n        return options;\r\n    }\r\n}","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n\r\n          window.ethereum.on('accountsChanged', function(){\r\n            window.location.reload();\r\n          });\r\n\r\n          window.ethereum.on('chainChanged', function(){\r\n            window.location.reload();\r\n          });\r\n\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import TokenRequester from \"../web3/tokenRequester.js\";\n\nexport default class LiquidityPool {\n\n    constructor(_protocolRequester, _tokenInstance, _account, _isFakeToken, _basePrice, _cssLogoClass) {\n        \n        this.protocolRequester = _protocolRequester;\n        this.address = _tokenInstance._address;\n        this.tokenRequester = new TokenRequester(_tokenInstance, _account);\n        this.isFakeToken = _isFakeToken;\n        this.basePrice = _basePrice;\n        this.account = _account;\n        this.cssLogoClass = _cssLogoClass;\n    }\n\n    /**\n     * Initialize Liquidity ppol Data\n     */\n    initialize = async() => {\n        // Fixed data\n        this.symbol = await this.tokenRequester.getTokenSymbol();\n        const r = await this.protocolRequester.getPoolRewardPerSecond(this.address);\n        this.dailyReward = Math.round(r * 86400);\n        await this.refreshGlobalPoolData();\n        await this.initializeUserPoolData();\n    }\n\n    /**\n     * Refresh Global Data of the pool (Tvl, tokenPrice, etc...)\n     */\n    refreshGlobalPoolData = async() => {\n        this.poolTvl = await this.protocolRequester.getTotalValueLocked(this.address);\n        this.tokenPrice = await this.getTokenPrice();\n        this.poolTvlUsd = this.poolTvl * this.tokenPrice;\n    }\n\n    /**\n     * Initialize user data of the liquidity pool\n     */\n    initializeUserPoolData = async() => {\n        this.userStaked = await this.protocolRequester.getPoolStakedAmount(this.address);\n        this.userStakedUsd = this.userStaked * this.tokenPrice;\n        this.walletBalance = await this.tokenRequester.getBalance();\n        await this.updateUserReward();\n    }\n\n    /**\n     * Update the user staked amount on the liquidity pool and refresh the balance\n     * Update also the user balance\n     */\n    updateUserStakedAmount = async(_amount) => {\n        this.userStaked = _amount;\n        this.userStakedUsd = this.userStaked * this.tokenPrice;\n        this.walletBalance = await this.tokenRequester.getBalance();\n    }\n\n    /**\n     * Update the user reward from the pool\n     */\n    updateUserReward = async() => {\n        this.userReward = await this.protocolRequester.getRewardAmount(this.address);\n        this.userRewardUsd = await this.userReward * this.tokenPrice;\n        return this.userReward;\n    }\n\n    /**\n     * Get the token price, it will be refresh only if the token is real\n     */\n    getTokenPrice =  async() => {\n        return (this.tokenPrice = this.isFakeToken ? this.basePrice : await this.protocolRequester.getTokenPrice(this.address));\n    }\n\n    /**\n     * Deposit the amount selected by the user - Triggered when user click on the deposit button\n     */\n    depositTokens = async (_depositAmount) => {\n        await this.tokenRequester.approve(this.protocolRequester.contract._address, _depositAmount); \n        await this.protocolRequester.stake(this.address, _depositAmount);\n    }\n\n    /**\n     * Withdraw the amount selected by the user - Triggered when user click on the withdraw button\n     */\n    withdrawTokens = async (_amount) => {\n        await this.protocolRequester.unstake(this.address, _amount);\n    }\n\n    /**\n     * Claim the user reward on the pool - Triggered when the user click on the \"claim reward\" button\n     */\n    claimReward = async() => {\n        await this.protocolRequester.claimPoolReward(this.address);\n    }\n\n    /**\n     * Get the events of the protocol contract\n     */\n    getEvents = () => {\n        return this.protocolRequester.getProtocolEvents();\n    }\n\n    /**\n     * Get the base event option\n     */\n    getEventOptions = async() => {\n        return await this.protocolRequester.getBaseEventOptions();\n    }\n}","import LiquidityPool from \"../models/liquidityPool.js\";\n\nexport default class PoolManager {\n\n    constructor(_protocolRequester) {\n\n        this.protocolRequester = _protocolRequester;\n        this.pools = {};\n        this.allPoolsTvl = 0;\n        this.allPoolsUserStakedUsd = 0;\n        this.allPoolsReward = 0;\n        this.allPoolsRewardUsd = 0;\n    }\n\n    /**\n     * Create pool liquidity\n     */\n    addNewPool = async (_id, _tokenInstance, _account, _isFakeToken, _basePrice, _cssLogoClass) => {\n\n        const pool = new LiquidityPool(this.protocolRequester, _tokenInstance, _account, _isFakeToken, _basePrice, _cssLogoClass);\n        await pool.initialize();\n\n        this.pools[_id] = pool;\n    }\n\n    /**\n     * Compute All pools Data (TVL, total user Staked ...)\n     */\n    recomputeAllGeneralData = () => {\n\n        let tvl = 0;\n        let userUsdAmount = 0;\n        let userReward = 0;\n        let userRewardUsd = 0;\n\n        for (var pool in this.pools) {\n            tvl += this.pools[pool].poolTvl * this.pools[pool].tokenPrice;\n            userUsdAmount += this.pools[pool].userStaked * this.pools[pool].tokenPrice;\n            userReward += this.pools[pool].userReward;\n            userRewardUsd += this.pools[pool].userRewardUsd;\n        };\n\n        this.allPoolsTvl = tvl;\n        this.allPoolsUserStakedUsd = userUsdAmount;\n        this.allPoolsUserReward = userReward;\n        this.allPoolsUserRewardUsd = userRewardUsd;\n    }\n}","import React, { Component } from \"react\";\r\nimport DefiProtocol from \"./contracts/DeFiProtocol.json\";\r\nimport HWT from \"./contracts/HWT.json\";\r\nimport GUM from \"./contracts/GUM.json\";\r\nimport ERC20 from \"./contracts/ERC20.json\";\r\nimport AppContainer from \"./components/AppContainer.js\";\r\nimport ProtocolRequester from \"./web3/protocolRequester.js\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport PoolManager from \"./manager/poolManager\";\r\n\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends Component {\r\n  state = { storageValue: 0, \r\n    web3: null, \r\n    account: null, \r\n    protocolInstance: null, \r\n    isOwner: null, \r\n    poolManager: null,\r\n    hwtPrice: 0\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = DefiProtocol.networks[networkId];\r\n      const protocolInstance = new web3.eth.Contract(\r\n        DefiProtocol.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n      \r\n      // Get the HWT token instance\r\n      const hwtDeployedNetwork = HWT.networks[networkId];\r\n      const hwtInstance = new web3.eth.Contract(\r\n        HWT.abi,\r\n        hwtDeployedNetwork && hwtDeployedNetwork.address,\r\n      );\r\n\r\n      // Get the GUM token instance\r\n      const gumDeployedNetwork = GUM.networks[networkId];\r\n      const gumInstance = new web3.eth.Contract(\r\n        GUM.abi,\r\n        gumDeployedNetwork && gumDeployedNetwork.address,\r\n      );\r\n\r\n      \r\n      // Get the LINK token instance\r\n      var linkInstance = new web3.eth.Contract(ERC20.abi, '0xa36085F69e2889c224210F603D836748e7dC0088');\r\n\r\n      // Define account and check if it's the owner\r\n      const owner = await protocolInstance.methods.owner().call();\r\n      const account = accounts[0];\r\n      const isOwner = owner === account;\r\n\r\n      // Create the Protocol requester that will request the Smart contract\r\n      // For the events, we don't want to get the past events, only actual, that's why we pass the getBlockNumber as callback\r\n      const protocolRequester = new ProtocolRequester(protocolInstance, account, async() => {\r\n        web3.eth.getBlockNumber();\r\n      });\r\n\r\n      // Fake token price are fixed\r\n      const hwtTokenPrice = await protocolRequester.getHwtTokenUsdValue();\r\n      const flpTokenPrice = await protocolRequester.getFlpTokenUsdValue();\r\n\r\n      // Create pool manager and pool\r\n      const poolManager = new PoolManager(protocolRequester);\r\n      await poolManager.addNewPool(0, hwtInstance, account, true, hwtTokenPrice, 'HwtLogo');\r\n      await poolManager.addNewPool(1, gumInstance, account, true, flpTokenPrice, 'GumLogo');\r\n      await poolManager.addNewPool(2, linkInstance, account, false, 0, 'LinkLogo');\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, \r\n        account: account, \r\n        isOwner: isOwner,\r\n        protocolInstance: protocolInstance,\r\n        poolManager: poolManager,\r\n        hwtPrice: hwtTokenPrice\r\n      });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <AppContainer account={this.state.account} isOwner={this.state.isOwner} hwtPrice={this.state.hwtPrice}  poolManager={this.state.poolManager}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}